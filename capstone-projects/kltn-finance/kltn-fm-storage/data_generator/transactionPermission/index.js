const fs = require("fs");

const accountIds = [
  8313653263695872, 8320740878581760, 8340623243018240, 8340623268478976,
  8340623292366848, 8340623315599360, 8340623342403584, 8340623382085632,
  8340623409840128, 8340623438053376, 8340623473246208, 8340623495036928,
  8340623523217408, 8340623553691648, 8340623575252992, 8340623595995136,
  8340623616966656, 8340623647571968, 8340623681912832, 8340623704227840,
  8340623736209408, 8340623760031744, 8340623786475520, 8340623821406208,
  8340623848865792, 8340623874719744,
];

const transactionGroupIds = [
  8318807930044416, 8318808316608512, 8318949400608768, 8318951134101504,
  8319064282234880, 8319064794955776, 8328034668347392, 8328035754409984,
  8329332349272064, 8340764280619008, 8340764295462912, 8340764315779072,
  8340764342222848, 8340764349169664, 8340764356050944, 8340764363882496,
  8340764371615744, 8340764378005504, 8340764384264192, 8340764391374848,
  8340764401074176, 8340764407758848, 8340764414312448, 8340764423094272,
  8340764431679488, 8340764438429696, 8340764447014912, 8340764456615936,
  8340764462972928, 8340764469886976, 8340764475686912, 8340764482928640,
  8340764489580544, 8340764496756736, 8340764503506944, 8340764509831168,
  8340764517367808, 8340764524969984, 8340764531687424, 8340764538208256,
  8340764544991232, 8340764551249920, 8340764558917632, 8340764565733376,
  8340764572909568, 8340764579725312, 8340764597059584, 8340764610789376,
  8340764625698816, 8340764645654528, 8340764656828416, 8340764664987648,
  8340764672557056, 8340764681109504, 8340764690710528, 8340764700934144,
  8340764710043648, 8340764717383680, 8340764723642368,
];
function shuffleArray(arr) {
  return arr
    .map((value) => ({ value, sort: Math.random() }))
    .sort((a, b) => a.sort - b.sort)
    .map(({ value }) => value);
}

function generateAccountGroupPairs(accountIds, groupIds, ratio = 0.7) {
  const result = [];

  accountIds.forEach((accountId) => {
    const shuffled = shuffleArray(groupIds);
    const groupCount = Math.floor(groupIds.length * ratio);
    const selected = shuffled.slice(0, groupCount);

    selected.forEach((groupId) => {
      result.push({ accountId, transactionGroupId: groupId });
    });
  });

  return result;
}

function jsonToCsv(data) {
  const headers = Object.keys(data[0]);
  const rows = data.map((row) =>
    headers.map((header) => `"${row[header]}"`).join(",")
  );
  return [headers.join(","), ...rows].join("\n");
}

function saveToCsv(fileName, data) {
  const csvContent = jsonToCsv(data);
  fs.writeFileSync(fileName, csvContent, "utf8");
  console.log(`File CSV đã được tạo: ${fileName}`);
}

const pairs = generateAccountGroupPairs(accountIds, transactionGroupIds, 0.7);
const timestamp = new Date().toISOString().replace(/[-T:.Z]/g, "");
const fileName = `transaction_permission_${timestamp}.csv`;
saveToCsv(fileName, pairs);
